//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MplJsonError {
    /// 0 (0x0) - The account has already been initialized
    #[error("The account has already been initialized")]
    AlreadyInitialized,
    /// 1 (0x1) - The account has not yet been initialized
    #[error("The account has not yet been initialized")]
    NotInitialized,
    /// 2 (0x2) - The key for the JSON metadata account is invalid.
    #[error("The key for the JSON metadata account is invalid.")]
    MetadataDerivedKeyInvalid,
    /// 3 (0x3) - The system program account is invalid.
    #[error("The system program account is invalid.")]
    InvalidSystemProgram,
    /// 4 (0x4) - The JSON data is invalid.
    #[error("The JSON data is invalid.")]
    InvalidJson,
    /// 5 (0x5) - Borsh failed to serialize this account.
    #[error("Borsh failed to serialize this account.")]
    BorshSerializeError,
    /// 6 (0x6) - The payer does not have authority to perform this action.
    #[error("The payer does not have authority to perform this action.")]
    InvalidAuthority,
}

impl solana_program::program_error::PrintProgramError for MplJsonError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
