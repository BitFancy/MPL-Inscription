/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type AppendValueInstructionAccounts = {
  /** The account to store the metadata in. */
  jsonAccount: PublicKey | Pda;
  /** The account to store the json account's metadata in. */
  jsonMetadataAccount: PublicKey | Pda;
  /** The account that will pay for the transaction and rent. */
  payer?: Signer;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type AppendValueInstructionData = {
  discriminator: number;
  value: string;
};

export type AppendValueInstructionDataArgs = { value: string };

export function getAppendValueInstructionDataSerializer(): Serializer<
  AppendValueInstructionDataArgs,
  AppendValueInstructionData
> {
  return mapSerializer<
    AppendValueInstructionDataArgs,
    any,
    AppendValueInstructionData
  >(
    struct<AppendValueInstructionData>(
      [
        ['discriminator', u8()],
        ['value', string()],
      ],
      { description: 'AppendValueInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<AppendValueInstructionDataArgs, AppendValueInstructionData>;
}

// Args.
export type AppendValueInstructionArgs = AppendValueInstructionDataArgs;

// Instruction.
export function appendValue(
  context: Pick<Context, 'payer' | 'programs'>,
  input: AppendValueInstructionAccounts & AppendValueInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplJson',
    'JSoNoHBzUEFnjpZtcNcNzv5KLzo4tD5v4Z1pT9G4jJa'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    jsonAccount: {
      index: 0,
      isWritable: true,
      value: input.jsonAccount ?? null,
    },
    jsonMetadataAccount: {
      index: 1,
      isWritable: true,
      value: input.jsonMetadataAccount ?? null,
    },
    payer: { index: 2, isWritable: true, value: input.payer ?? null },
    systemProgram: {
      index: 3,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: AppendValueInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAppendValueInstructionDataSerializer().serialize(
    resolvedArgs as AppendValueInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
