/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type MintInscription = Account<MintInscriptionAccountData>;

export type MintInscriptionAccountData = { data: Uint8Array };

export type MintInscriptionAccountDataArgs = MintInscriptionAccountData;

export function getMintInscriptionAccountDataSerializer(): Serializer<
  MintInscriptionAccountDataArgs,
  MintInscriptionAccountData
> {
  return struct<MintInscriptionAccountData>([['data', bytes()]], {
    description: 'MintInscriptionAccountData',
  }) as Serializer<MintInscriptionAccountDataArgs, MintInscriptionAccountData>;
}

export function deserializeMintInscription(
  rawAccount: RpcAccount
): MintInscription {
  return deserializeAccount(
    rawAccount,
    getMintInscriptionAccountDataSerializer()
  );
}

export async function fetchMintInscription(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MintInscription> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MintInscription');
  return deserializeMintInscription(maybeAccount);
}

export async function safeFetchMintInscription(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MintInscription | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMintInscription(maybeAccount) : null;
}

export async function fetchAllMintInscription(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MintInscription[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MintInscription');
    return deserializeMintInscription(maybeAccount);
  });
}

export async function safeFetchAllMintInscription(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MintInscription[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMintInscription(maybeAccount as RpcAccount)
    );
}

export function getMintInscriptionGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplInscription',
    '1NSCRfGeyo7wPUazGbaPBUsTM49e1k2aXewHGARfzSo'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ data: Uint8Array }>({ data: [0, bytes()] })
    .deserializeUsing<MintInscription>((account) =>
      deserializeMintInscription(account)
    );
}

export function findMintInscriptionPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the mint account */
    mint: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplInscription',
    '1NSCRfGeyo7wPUazGbaPBUsTM49e1k2aXewHGARfzSo'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('Inscription'),
    publicKeySerializer().serialize(programId),
    publicKeySerializer().serialize(seeds.mint),
  ]);
}

export async function fetchMintInscriptionFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findMintInscriptionPda>[1],
  options?: RpcGetAccountOptions
): Promise<MintInscription> {
  return fetchMintInscription(
    context,
    findMintInscriptionPda(context, seeds),
    options
  );
}

export async function safeFetchMintInscriptionFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findMintInscriptionPda>[1],
  options?: RpcGetAccountOptions
): Promise<MintInscription | null> {
  return safeFetchMintInscription(
    context,
    findMintInscriptionPda(context, seeds),
    options
  );
}
