/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type JsonMetadata = Account<JsonMetadataAccountData>;

export type JsonMetadataAccountData = {
  key: Key;
  bump: number;
  mutable: boolean;
  authorities: Array<PublicKey>;
};

export type JsonMetadataAccountDataArgs = {
  key: KeyArgs;
  bump: number;
  mutable: boolean;
  authorities: Array<PublicKey>;
};

export function getJsonMetadataAccountDataSerializer(): Serializer<
  JsonMetadataAccountDataArgs,
  JsonMetadataAccountData
> {
  return struct<JsonMetadataAccountData>(
    [
      ['key', getKeySerializer()],
      ['bump', u8()],
      ['mutable', bool()],
      ['authorities', array(publicKeySerializer())],
    ],
    { description: 'JsonMetadataAccountData' }
  ) as Serializer<JsonMetadataAccountDataArgs, JsonMetadataAccountData>;
}

export function deserializeJsonMetadata(rawAccount: RpcAccount): JsonMetadata {
  return deserializeAccount(rawAccount, getJsonMetadataAccountDataSerializer());
}

export async function fetchJsonMetadata(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<JsonMetadata> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'JsonMetadata');
  return deserializeJsonMetadata(maybeAccount);
}

export async function safeFetchJsonMetadata(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<JsonMetadata | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeJsonMetadata(maybeAccount) : null;
}

export async function fetchAllJsonMetadata(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<JsonMetadata[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'JsonMetadata');
    return deserializeJsonMetadata(maybeAccount);
  });
}

export async function safeFetchAllJsonMetadata(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<JsonMetadata[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeJsonMetadata(maybeAccount as RpcAccount));
}

export function getJsonMetadataGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplJson',
    'JSoNoHBzUEFnjpZtcNcNzv5KLzo4tD5v4Z1pT9G4jJa'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      bump: number;
      mutable: boolean;
      authorities: Array<PublicKey>;
    }>({
      key: [0, getKeySerializer()],
      bump: [1, u8()],
      mutable: [2, bool()],
      authorities: [3, array(publicKeySerializer())],
    })
    .deserializeUsing<JsonMetadata>((account) =>
      deserializeJsonMetadata(account)
    );
}

export function findJsonMetadataPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the JSON Account */
    jsonAccount: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplJson',
    'JSoNoHBzUEFnjpZtcNcNzv5KLzo4tD5v4Z1pT9G4jJa'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('JSON'),
    publicKeySerializer().serialize(programId),
    publicKeySerializer().serialize(seeds.jsonAccount),
  ]);
}

export async function fetchJsonMetadataFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findJsonMetadataPda>[1],
  options?: RpcGetAccountOptions
): Promise<JsonMetadata> {
  return fetchJsonMetadata(
    context,
    findJsonMetadataPda(context, seeds),
    options
  );
}

export async function safeFetchJsonMetadataFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findJsonMetadataPda>[1],
  options?: RpcGetAccountOptions
): Promise<JsonMetadata | null> {
  return safeFetchJsonMetadata(
    context,
    findJsonMetadataPda(context, seeds),
    options
  );
}
